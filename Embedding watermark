{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Poojithasingh07/Federated-Learning-with-Neural-Water-Mark-Embedding/blob/main/Embedding%20watermark\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install -q \"flwr==1.6.0\" numpy\n"
      ],
      "metadata": {
        "id": "LWUOpehQfAVx"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "train_features = np.load('train_features.npy')\n",
        "train_labels = np.load('train_labels.npy')\n",
        "test_features = np.load('test_features.npy')\n",
        "test_labels = np.load('test_labels.npy')\n",
        "\n",
        "print(\"Data loaded successfully!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PcpQbIoqfAfI",
        "outputId": "b43edb70-a459-441a-c687-db94df76c288"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data loaded successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile fl_partition.py\n",
        "import numpy as np\n",
        "from collections import defaultdict\n",
        "\n",
        "NUM_CLIENTS = 5\n",
        "X_train = np.load(\"train_features.npy\").astype(np.float32) / 255.0\n",
        "y_train = np.load(\"train_labels.npy\").astype(np.int64)\n",
        "X_test  = np.load(\"test_features.npy\").astype(np.float32) / 255.0\n",
        "y_test  = np.load(\"test_labels.npy\").astype(np.int64)\n",
        "\n",
        "def stratified_split(X, y, num_clients=5, seed=42):\n",
        "    lab2idx = defaultdict(list)\n",
        "    for i, lab in enumerate(y):\n",
        "        lab2idx[int(lab)].append(i)\n",
        "    # Shuffle indices label-wise for balance\n",
        "    rngs = {lab: np.random.default_rng(seed + lab) for lab in lab2idx}\n",
        "    for lab, inds in lab2idx.items():\n",
        "        rngs[lab].shuffle(inds)\n",
        "    # Round-robin distribute each labelâ€™s indices\n",
        "    buckets = [[] for _ in range(num_clients)]\n",
        "    for _, inds in lab2idx.items():\n",
        "        for j, idx in enumerate(inds):\n",
        "            buckets[j % num_clients].append(idx)\n",
        "    return [np.array(b, dtype=np.int64) for b in buckets]\n",
        "\n",
        "splits = stratified_split(X_train, y_train, NUM_CLIENTS)\n",
        "for cid, idx in enumerate(splits):\n",
        "    Xc, yc = X_train[idx], y_train[idx]\n",
        "    np.savez(f\"client_{cid}.npz\", X=Xc, y=yc)\n",
        "    print(f\"Saved client_{cid}.npz: X={Xc.shape}, y={yc.shape}\")\n",
        "\n",
        "np.savez(\"test_shared.npz\", X=X_test, y=y_test)\n",
        "print(\"Saved test_shared.npz:\", X_test.shape, y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rWLnPNQYfAkA",
        "outputId": "ddf68bce-cefd-4a66-91e0-51defefa4b2d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting fl_partition.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python fl_partition.py\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4CjPdwJEfAqK",
        "outputId": "9e4dc862-a459-4b1d-c61a-b08bf1c0e36f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved client_0.npz: X=(4800, 64), y=(4800,)\n",
            "Saved client_1.npz: X=(4800, 64), y=(4800,)\n",
            "Saved client_2.npz: X=(4800, 64), y=(4800,)\n",
            "Saved client_3.npz: X=(4800, 64), y=(4800,)\n",
            "Saved client_4.npz: X=(4800, 64), y=(4800,)\n",
            "Saved test_shared.npz: (6000, 64) (6000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile server.py\n",
        "import flwr as fl\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Require EXACTLY 5 clients to train/evaluate each round\n",
        "    strategy = fl.server.strategy.FedAvg(\n",
        "        fraction_fit=1.0,\n",
        "        fraction_evaluate=1.0,\n",
        "        min_fit_clients=5,\n",
        "        min_evaluate_clients=5,\n",
        "        min_available_clients=5,\n",
        "    )\n",
        "    fl.server.start_server(\n",
        "        server_address=\"127.0.0.1:8081\",          # use a free port\n",
        "        config=fl.server.ServerConfig(num_rounds=5),\n",
        "        strategy=strategy,\n",
        "    )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ph2iLKURi3Hh",
        "outputId": "fbae1405-52a1-414c-f8a5-3e8e787b7ca7"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting server.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile server.py\n",
        "import flwr as fl\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Require EXACTLY 5 clients to train/evaluate each round\n",
        "    strategy = fl.server.strategy.FedAvg(\n",
        "        fraction_fit=1.0,\n",
        "        fraction_evaluate=1.0,\n",
        "        min_fit_clients=5,\n",
        "        min_evaluate_clients=5,\n",
        "        min_available_clients=5,\n",
        "    )\n",
        "    fl.server.start_server(\n",
        "        server_address=\"127.0.0.1:8081\",          # use a free port\n",
        "        config=fl.server.ServerConfig(num_rounds=5),\n",
        "        strategy=strategy,\n",
        "    )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zQNJcuKxjkM2",
        "outputId": "8a0e2d50-733e-42fc-c1dc-ac84396fa422"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting server.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile client.py\n",
        "import argparse\n",
        "import numpy as np\n",
        "import flwr as fl\n",
        "\n",
        "def softmax(z):\n",
        "    z = z - z.max(axis=1, keepdims=True)\n",
        "    e = np.exp(z)\n",
        "    return e / (e.sum(axis=1, keepdims=True) + 1e-12)\n",
        "\n",
        "def one_hot(y, C):\n",
        "    Y = np.zeros((y.shape[0], C), dtype=np.float32)\n",
        "    Y[np.arange(y.shape[0]), y] = 1.0\n",
        "    return Y\n",
        "\n",
        "def loss_and_grad(W, b, X, y, l2=1e-4):\n",
        "    N = X.shape[0]\n",
        "    P = softmax(X @ W + b)\n",
        "    C = P.shape[1]\n",
        "    Y = one_hot(y, C)\n",
        "    loss = -np.sum(Y * np.log(P + 1e-12)) / N + 0.5 * l2 * np.sum(W * W)\n",
        "    g = (P - Y) / N\n",
        "    dW = X.T @ g + l2 * W\n",
        "    db = g.sum(axis=0)\n",
        "    return loss, dW, db\n",
        "\n",
        "def accuracy(W, b, X, y):\n",
        "    return float((np.argmax(X @ W + b, axis=1) == y).mean())\n",
        "\n",
        "class NpClient(fl.client.NumPyClient):\n",
        "    def __init__(self, X, y, Xt, yt, lr=0.5, batch=128, l2=1e-4, local_epochs=1):\n",
        "        self.X, self.y, self.Xt, self.yt = X, y, Xt, yt\n",
        "        self.lr, self.batch, self.l2, self.local_epochs = lr, batch, l2, local_epochs\n",
        "        nf = X.shape[1]\n",
        "        nc = int(np.max(y)) + 1\n",
        "        rng = np.random.default_rng(0)\n",
        "        self.W = rng.normal(scale=0.01, size=(nf, nc)).astype(np.float32)\n",
        "        self.b = np.zeros((nc,), dtype=np.float32)\n",
        "\n",
        "    def get_parameters(self, config):\n",
        "        return [self.W, self.b]\n",
        "\n",
        "    def fit(self, parameters, config):\n",
        "        self.W, self.b = parameters\n",
        "        N = self.X.shape[0]\n",
        "        idx = np.arange(N)\n",
        "        np.random.default_rng().shuffle(idx)\n",
        "        X, y = self.X[idx], self.y[idx]\n",
        "        # Simple SGD\n",
        "        for _ in range(self.local_epochs):\n",
        "            for s in range(0, N, self.batch):\n",
        "                e = s + self.batch\n",
        "                xb, yb = X[s:e], y[s:e]\n",
        "                _, dW, db = loss_and_grad(self.W, self.b, xb, yb, l2=self.l2)\n",
        "                self.W -= self.lr * dW\n",
        "                self.b -= self.lr * db\n",
        "        return [self.W, self.b], len(self.y), {}\n",
        "\n",
        "    def evaluate(self, parameters, config):\n",
        "        self.W, self.b = parameters\n",
        "        loss, _, _ = loss_and_grad(self.W, self.b, self.Xt, self.yt, l2=self.l2)\n",
        "        acc = accuracy(self.W, self.b, self.Xt, self.yt)\n",
        "        return float(loss), len(self.yt), {\"accuracy\": acc}\n",
        "\n",
        "def load_client(cid: int):\n",
        "    p = np.load(f\"client_{cid}.npz\")\n",
        "    t = np.load(\"test_shared.npz\")\n",
        "    return p[\"X\"], p[\"y\"], t[\"X\"], t[\"y\"]\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    ap = argparse.ArgumentParser()\n",
        "    ap.add_argument(\"--cid\", type=int, required=True)               # 0..4\n",
        "    ap.add_argument(\"--server\", type=str, default=\"127.0.0.1:8081\") # must match server\n",
        "    ap.add_argument(\"--lr\", type=float, default=0.5)\n",
        "    ap.add_argument(\"--batch\", type=int, default=128)\n",
        "    ap.add_argument(\"--local_epochs\", type=int, default=1)\n",
        "    a = ap.parse_args()\n",
        "\n",
        "    X, y, Xt, yt = load_client(a.cid)\n",
        "    client = NpClient(X, y, Xt, yt, lr=a.lr, batch=a.batch, local_epochs=a.local_epochs)\n",
        "    # Flower 1.6.0 supports start_numpy_client; but to be future-ready, use to_client()\n",
        "    fl.client.start_client(server_address=a.server, client=client.to_client())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bxrAiWE4k2uN",
        "outputId": "7ac7d393-aab1-457f-ed8b-cc4fd5004cf6"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting client.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import subprocess, sys, time, signal, os\n",
        "\n",
        "# Make sure no old server is hogging a port (ignore errors)\n",
        "try:\n",
        "    import psutil\n",
        "except ImportError:\n",
        "    !pip -q install psutil\n",
        "import psutil\n",
        "\n",
        "# Kill any previous python server.py processes (safety)\n",
        "for p in psutil.process_iter(attrs=[\"pid\", \"name\", \"cmdline\"]):\n",
        "    try:\n",
        "        cmd = \" \".join(p.info.get(\"cmdline\") or [])\n",
        "        if \"server.py\" in cmd:\n",
        "            p.kill()\n",
        "    except (psutil.NoSuchProcess, psutil.AccessDenied):\n",
        "        pass\n",
        "\n",
        "# 1) Start the server\n",
        "server = subprocess.Popen([sys.executable, \"server.py\"])\n",
        "time.sleep(2)  # give the server time to bind\n",
        "\n",
        "# 2) Start five clients\n",
        "clients = []\n",
        "for cid in range(5):\n",
        "    # Pass the client ID using the --cid flag as expected by client.py\n",
        "    p = subprocess.Popen([sys.executable, \"client.py\", \"--cid\", str(cid), \"--server\", \"127.0.0.1:8081\"])\n",
        "    clients.append(p)\n",
        "\n",
        "# 3) Wait for all clients\n",
        "exit_codes = []\n",
        "for p in clients:\n",
        "    exit_codes.append(p.wait())\n",
        "\n",
        "# 4) Stop the server\n",
        "server.send_signal(signal.SIGINT)\n",
        "server.wait()\n",
        "\n",
        "print(\"Training finished. Client exit codes:\", exit_codes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rPW6sKyulCqt",
        "outputId": "b93082e9-2891-42ca-d65a-5e1cd7a2e22e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training finished. Client exit codes: [0, 0, 0, 0, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile server.py\n",
        "import flwr as fl\n",
        "import csv\n",
        "\n",
        "class LoggingFedAvg(fl.server.strategy.FedAvg):\n",
        "    def __init__(self, logfile: str = \"fl_metrics.csv\", **kwargs):\n",
        "        super().__init__(**kwargs)\n",
        "        self.logfile = logfile\n",
        "        # Init CSV with header\n",
        "        with open(self.logfile, \"w\", newline=\"\") as f:\n",
        "            csv.writer(f).writerow([\"round\", \"num_eval_examples\", \"eval_loss\", \"eval_accuracy\"])\n",
        "\n",
        "    def aggregate_evaluate(self, rnd, results, failures):\n",
        "        # Let FedAvg do its normal aggregation first\n",
        "        agg = super().aggregate_evaluate(rnd, results, failures)\n",
        "\n",
        "        # Weighted metrics across clients\n",
        "        if results:\n",
        "            total = sum(res.num_examples for _, res in results)\n",
        "            w_loss = sum(res.loss * res.num_examples for _, res in results) / total\n",
        "            w_acc  = sum(res.metrics.get(\"accuracy\", 0.0) * res.num_examples for _, res in results) / total\n",
        "\n",
        "            # Append to CSV\n",
        "            with open(self.logfile, \"a\", newline=\"\") as f:\n",
        "                csv.writer(f).writerow([rnd, total, f\"{w_loss:.6f}\", f\"{w_acc:.6f}\"])\n",
        "\n",
        "            print(f\"[Server] Round {rnd} â€” eval_loss={w_loss:.4f}, eval_acc={w_acc:.4f} over {total} examples\")\n",
        "\n",
        "        return agg\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    strategy = LoggingFedAvg(\n",
        "        fraction_fit=1.0,\n",
        "        fraction_evaluate=1.0,\n",
        "        min_fit_clients=5,\n",
        "        min_evaluate_clients=5,\n",
        "        min_available_clients=5,\n",
        "        logfile=\"fl_metrics.csv\",\n",
        "    )\n",
        "\n",
        "    fl.server.start_server(\n",
        "        server_address=\"127.0.0.1:8081\",\n",
        "        config=fl.server.ServerConfig(num_rounds=5),  # bump to 20â€“50 for nicer curves\n",
        "        strategy=strategy,\n",
        "    )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CdtmEQtClCmp",
        "outputId": "a5a54228-55fe-4625-c4db-47a09274f681"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting server.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "rounds, acc, loss = [], [], []\n",
        "with open(\"fl_metrics.csv\", newline=\"\") as f:\n",
        "    r = csv.DictReader(f)\n",
        "    for row in r:\n",
        "        rounds.append(int(row[\"round\"]))\n",
        "        loss.append(float(row[\"eval_loss\"]))\n",
        "        acc.append(float(row[\"eval_accuracy\"]))\n",
        "\n",
        "# Show a quick table\n",
        "print(\"round | eval_loss | eval_accuracy\")\n",
        "for r, l, a in zip(rounds, loss, acc):\n",
        "    print(f\"{r:5d} | {l:9.4f} | {a:12.4f}\")\n",
        "\n",
        "# Accuracy curve\n",
        "plt.figure()\n",
        "plt.plot(rounds, acc, marker=\"o\")\n",
        "plt.title(\"Federated Learning â€” Global Accuracy per Round\")\n",
        "plt.xlabel(\"Round\"); plt.ylabel(\"Accuracy\"); plt.grid(True); plt.show()\n",
        "\n",
        "# Loss curve\n",
        "plt.figure()\n",
        "plt.plot(rounds, loss, marker=\"o\")\n",
        "plt.title(\"Federated Learning â€” Global Loss per Round\")\n",
        "plt.xlabel(\"Round\"); plt.ylabel(\"Loss\"); plt.grid(True); plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9rtGtScXhmNe",
        "outputId": "d3c04ac6-99df-4ac3-85a5-9ca3f6a2edae"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "round | eval_loss | eval_accuracy\n",
            "    1 |    3.3143 |       0.0857\n",
            "    2 |    3.2309 |       0.1302\n",
            "    3 |    3.1560 |       0.2188\n",
            "    4 |    3.0908 |       0.2017\n",
            "    5 |    3.0372 |       0.2755\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile server.py\n",
        "import flwr as fl\n",
        "import csv, numpy as np\n",
        "\n",
        "from flwr.common import parameters_to_ndarrays\n",
        "\n",
        "class LoggingFedAvg(fl.server.strategy.FedAvg):\n",
        "    def __init__(self, logfile: str = \"fl_metrics.csv\", **kwargs):\n",
        "        super().__init__(**kwargs)\n",
        "        self.logfile = logfile\n",
        "        # Init CSV\n",
        "        with open(self.logfile, \"w\", newline=\"\") as f:\n",
        "            csv.writer(f).writerow([\"round\", \"num_eval_examples\", \"eval_loss\", \"eval_accuracy\"])\n",
        "\n",
        "    def aggregate_evaluate(self, rnd, results, failures):\n",
        "        agg = super().aggregate_evaluate(rnd, results, failures)\n",
        "        if results:\n",
        "            total = sum(res.num_examples for _, res in results)\n",
        "            w_loss = sum(res.loss * res.num_examples for _, res in results) / total\n",
        "            w_acc  = sum(res.metrics.get(\"accuracy\", 0.0) * res.num_examples for _, res in results) / total\n",
        "            with open(self.logfile, \"a\", newline=\"\") as f:\n",
        "                csv.writer(f).writerow([rnd, total, f\"{w_loss:.6f}\", f\"{w_acc:.6f}\"])\n",
        "            print(f\"[Server] Round {rnd} â€” eval_loss={w_loss:.4f}, eval_acc={w_acc:.4f} over {total} examples\")\n",
        "        return agg\n",
        "\n",
        "    def aggregate_fit(self, rnd, results, failures):\n",
        "        # Get aggregated parameters from FedAvg\n",
        "        aggregated = super().aggregate_fit(rnd, results, failures)\n",
        "        if aggregated is not None:\n",
        "            params, _ = aggregated\n",
        "            if params is not None:\n",
        "                nds = parameters_to_ndarrays(params)  # preserves client order [W, b]\n",
        "                try:\n",
        "                    W, b = nds\n",
        "                except ValueError:\n",
        "                    # If your client returns more tensors, adjust unpacking accordingly\n",
        "                    W, b = nds[0], nds[1]\n",
        "                np.savez(\"global_model_latest.npz\", W=W, b=b)\n",
        "                print(f\"[Server] Saved global model at end of round {rnd} -> global_model_latest.npz\")\n",
        "        return aggregated\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    strategy = LoggingFedAvg(\n",
        "        fraction_fit=1.0,\n",
        "        fraction_evaluate=1.0,\n",
        "        min_fit_clients=5,\n",
        "        min_evaluate_clients=5,\n",
        "        min_available_clients=5,\n",
        "        logfile=\"fl_metrics.csv\",\n",
        "    )\n",
        "    fl.server.start_server(\n",
        "        server_address=\"127.0.0.1:8081\",\n",
        "        config=fl.server.ServerConfig(num_rounds=5),  # bump to 20â€“50 for nicer curves\n",
        "        strategy=strategy,\n",
        "    )\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "brBlxjoarGAV",
        "outputId": "9d2cde1a-71d3-4ec1-c158-f61547135246"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting server.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile inference.py\n",
        "import numpy as np\n",
        "\n",
        "def softmax(z):\n",
        "    z = z - z.max(axis=1, keepdims=True)\n",
        "    e = np.exp(z)\n",
        "    return e / (e.sum(axis=1, keepdims=True) + 1e-12)\n",
        "\n",
        "def accuracy(W, b, X, y):\n",
        "    preds = np.argmax(X @ W + b, axis=1)\n",
        "    return float((preds == y).mean())\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Load final global model\n",
        "    m = np.load(\"global_model_latest.npz\")\n",
        "    W, b = m[\"W\"], m[\"b\"]\n",
        "\n",
        "    # Load shared test set\n",
        "    t = np.load(\"test_shared.npz\")\n",
        "    Xt, yt = t[\"X\"].astype(np.float32), t[\"y\"].astype(np.int64)\n",
        "    # If features are byte-scaled, ensure normalization matches training\n",
        "    if Xt.max() > 1.0:\n",
        "        Xt = Xt / 255.0\n",
        "\n",
        "    acc = accuracy(W, b, Xt, yt)\n",
        "    print(f\"Final global test accuracy: {acc:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VbPfPmkdrF9R",
        "outputId": "8f679a59-ab34-4d79-9b4a-8130362322fb"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting inference.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    import sys\n",
        "    try:\n",
        "        cid = int(sys.argv[1])\n",
        "    except (IndexError, ValueError):\n",
        "        cid = 0  # default client id when not provided\n",
        "    ...\n"
      ],
      "metadata": {
        "id": "wdr-R-fHwn6O"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import flwr as fl\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Require exactly 5 clients to participate each round\n",
        "    strategy = fl.server.strategy.FedAvg(\n",
        "        fraction_fit=1.0,\n",
        "        fraction_evaluate=1.0,\n",
        "        min_fit_clients=5,\n",
        "        min_evaluate_clients=5,\n",
        "        min_available_clients=5,\n",
        "    )\n",
        "    fl.server.start_server(\n",
        "        server_address=\"127.0.0.1:8081\",         # change if needed\n",
        "        config=fl.server.ServerConfig(num_rounds=5),\n",
        "        strategy=strategy,\n",
        "    )\n"
      ],
      "metadata": {
        "id": "YidBy5Wvy2vQ",
        "outputId": "cec4ebf5-29b9-470f-c5cc-b675106b1bc3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO flwr 2025-08-10 16:37:40,895 | app.py:163 | Starting Flower server, config: ServerConfig(num_rounds=5, round_timeout=None)\n",
            "INFO:flwr:Starting Flower server, config: ServerConfig(num_rounds=5, round_timeout=None)\n",
            "INFO flwr 2025-08-10 16:37:40,904 | app.py:176 | Flower ECE: gRPC server running (5 rounds), SSL is disabled\n",
            "INFO:flwr:Flower ECE: gRPC server running (5 rounds), SSL is disabled\n",
            "INFO flwr 2025-08-10 16:37:40,910 | server.py:89 | Initializing global parameters\n",
            "INFO:flwr:Initializing global parameters\n",
            "INFO flwr 2025-08-10 16:37:40,912 | server.py:276 | Requesting initial parameters from one random client\n",
            "INFO:flwr:Requesting initial parameters from one random client\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-248387609.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mmin_available_clients\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     )\n\u001b[0;32m---> 12\u001b[0;31m     fl.server.start_server(\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0mserver_address\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"127.0.0.1:8081\"\u001b[0m\u001b[0;34m,\u001b[0m         \u001b[0;31m# change if needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mconfig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mserver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mServerConfig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/flwr/server/app.py\u001b[0m in \u001b[0;36mstart_server\u001b[0;34m(server_address, server, config, strategy, client_manager, grpc_max_message_length, certificates)\u001b[0m\n\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0;31m# Start training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m     hist = run_fl(\n\u001b[0m\u001b[1;32m    185\u001b[0m         \u001b[0mserver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitialized_server\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0mconfig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitialized_config\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/flwr/server/app.py\u001b[0m in \u001b[0;36mrun_fl\u001b[0;34m(server, config)\u001b[0m\n\u001b[1;32m    223\u001b[0m ) -> History:\n\u001b[1;32m    224\u001b[0m     \u001b[0;34m\"\"\"Train a model on the given server and return the History object.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 225\u001b[0;31m     \u001b[0mhist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mserver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_rounds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    226\u001b[0m     \u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mINFO\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"app_fit: losses_distributed %s\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlosses_distributed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mINFO\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"app_fit: metrics_distributed_fit %s\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics_distributed_fit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/flwr/server/server.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, num_rounds, timeout)\u001b[0m\n\u001b[1;32m     88\u001b[0m         \u001b[0;31m# Initialize parameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m         \u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mINFO\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Initializing global parameters\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_initial_parameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m         \u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mINFO\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Evaluating initial parameters\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/flwr/server/server.py\u001b[0m in \u001b[0;36m_get_initial_parameters\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    275\u001b[0m         \u001b[0;31m# Get initial parameters from one of the clients\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m         \u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mINFO\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Requesting initial parameters from one random client\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 277\u001b[0;31m         \u001b[0mrandom_client\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_client_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    278\u001b[0m         \u001b[0mins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGetParametersIns\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m         \u001b[0mget_parameters_res\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_parameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/flwr/server/client_manager.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, num_clients, min_num_clients, criterion)\u001b[0m\n\u001b[1;32m    185\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmin_num_clients\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m             \u001b[0mmin_num_clients\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnum_clients\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait_for\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmin_num_clients\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m         \u001b[0;31m# Sample clients which meet the criterion\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0mavailable_cids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclients\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/flwr/server/client_manager.py\u001b[0m in \u001b[0;36mwait_for\u001b[0;34m(self, num_clients, timeout)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \"\"\"\n\u001b[1;32m    131\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cv\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m             return self._cv.wait_for(\n\u001b[0m\u001b[1;32m    133\u001b[0m                 \u001b[0;32mlambda\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclients\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mnum_clients\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m             )\n",
            "\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36mwait_for\u001b[0;34m(self, predicate, timeout)\u001b[0m\n\u001b[1;32m    360\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mwaittime\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    361\u001b[0m                         \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 362\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwaittime\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    363\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    364\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    329\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 331\u001b[0;31m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m                     \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "import flwr as fl\n",
        "import numpy as np\n",
        "\n",
        "# Function to load dataset for a given client\n",
        "def load_client_data(cid):\n",
        "    data = np.load(f\"client_{cid}.npz\")\n",
        "    X, y = data[\"X\"], data[\"y\"]\n",
        "    if X.max() > 1.0:\n",
        "        X = X / 255.0\n",
        "    return X.astype(np.float32), y.astype(np.int64)\n",
        "\n",
        "# Simple softmax regression model\n",
        "def model_init(input_dim=64, num_classes=10):\n",
        "    W = np.zeros((input_dim, num_classes), dtype=np.float32)\n",
        "    b = np.zeros((num_classes,), dtype=np.float32)\n",
        "    return W, b\n",
        "\n",
        "def softmax(z):\n",
        "    z = z - z.max(axis=1, keepdims=True)\n",
        "    e = np.exp(z)\n",
        "    return e / (e.sum(axis=1, keepdims=True) + 1e-12)\n",
        "\n",
        "def accuracy(W, b, X, y):\n",
        "    preds = np.argmax(X @ W + b, axis=1)\n",
        "    return float((preds == y).mean())\n",
        "\n",
        "class NumpyClient(fl.client.NumPyClient):\n",
        "    def __init__(self, cid, X, y, Xt, yt):\n",
        "        self.cid = cid\n",
        "        self.X, self.y = X, y\n",
        "        self.Xt, self.yt = Xt, yt\n",
        "        self.W, self.b = model_init(input_dim=X.shape[1], num_classes=len(np.unique(y)))\n",
        "\n",
        "    def get_parameters(self, config):\n",
        "        print(f\"[Client {self.cid}] Sending parameters to server\")\n",
        "        return [self.W, self.b]\n",
        "\n",
        "    def fit(self, parameters, config):\n",
        "        print(f\"[Client {self.cid}] Starting local training...\")\n",
        "        self.W, self.b = parameters\n",
        "        lr = 0.1\n",
        "        for _ in range(5):\n",
        "            preds = softmax(self.X @ self.W + self.b)\n",
        "            grad_W = self.X.T @ (preds - np.eye(preds.shape[1])[self.y]) / len(self.y)\n",
        "            grad_b = np.mean(preds - np.eye(preds.shape[1])[self.y], axis=0)\n",
        "            self.W -= lr * grad_W\n",
        "            self.b -= lr * grad_b\n",
        "        print(f\"[Client {self.cid}] Finished local training.\")\n",
        "        return [self.W, self.b], len(self.X), {}\n",
        "\n",
        "    def evaluate(self, parameters, config):\n",
        "        print(f\"[Client {self.cid}] Evaluating model...\")\n",
        "        self.W, self.b = parameters\n",
        "        loss = -np.mean(np.log(softmax(self.Xt @ self.W + self.b)[np.arange(len(self.yt)), self.yt]))\n",
        "        acc = accuracy(self.W, self.b, self.Xt, self.yt)\n",
        "        print(f\"[Client {self.cid}] Eval loss: {loss:.4f}, Eval accuracy: {acc:.4f}\")\n",
        "        return float(loss), len(self.Xt), {\"accuracy\": acc}\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Safe argument parsing: default to client 0 if no valid int is given\n",
        "    try:\n",
        "        cid = int(sys.argv[1])\n",
        "    except (IndexError, ValueError):\n",
        "        cid = 0\n",
        "        print(f\"No valid client ID passed, defaulting to cid={cid}\")\n",
        "\n",
        "    X, y = load_client_data(cid)\n",
        "    Xt, yt = np.load(\"test_shared.npz\")[\"X\"], np.load(\"test_shared.npz\")[\"y\"]\n",
        "    if Xt.max() > 1.0:\n",
        "        Xt = Xt / 255.0\n",
        "\n",
        "    client = NumpyClient(cid, X, y, Xt.astype(np.float32), yt.astype(np.int64))\n",
        "    fl.client.start_client(server_address=\"127.0.0.1:8081\", client=client.to_client())\n"
      ],
      "metadata": {
        "id": "qXP5EDqs95ji",
        "outputId": "420772e9-33c0-4f80-aaeb-106c7051c9ef",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO flwr 2025-08-10 17:11:53,777 | grpc.py:52 | Opened insecure gRPC connection (no certificates were passed)\n",
            "INFO:flwr:Opened insecure gRPC connection (no certificates were passed)\n",
            "DEBUG flwr 2025-08-10 17:11:53,791 | connection.py:42 | ChannelConnectivity.IDLE\n",
            "DEBUG:flwr:ChannelConnectivity.IDLE\n",
            "DEBUG flwr 2025-08-10 17:11:53,800 | connection.py:42 | ChannelConnectivity.READY\n",
            "DEBUG:flwr:ChannelConnectivity.READY\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "No valid client ID passed, defaulting to cid=0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cid = 0  # or 1, 2, 3, 4\n",
        "X, y = load_client_data(cid)\n",
        "Xt, yt = np.load(\"test_shared.npz\")[\"X\"], np.load(\"test_shared.npz\")[\"y\"]\n",
        "...\n",
        "fl.client.start_client(server_address=\"127.0.0.1:8081\", client=client.to_client())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "k2IqymGWmdS7",
        "outputId": "350948d3-11b5-4035-fd9c-018754a8054e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'load_client_data' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-355000022.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m  \u001b[0;31m# or 1, 2, 3, 4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_client_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"test_shared.npz\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"X\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"test_shared.npz\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mfl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_client\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mserver_address\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"127.0.0.1:8081\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclient\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_client\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'load_client_data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_Vzcfx5LmdQZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome to Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}